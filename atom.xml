<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Icex`s Blah</title>
  <subtitle>会有一些代码备忘与整理，软件评测和安利，写的小文或者拍的片儿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-10T18:00:40.866Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Icex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tomcat 8 设置HTTPS通道</title>
    <link href="http://yoursite.com/2017/02/05/2017-02-05-tomcat8https/"/>
    <id>http://yoursite.com/2017/02/05/2017-02-05-tomcat8https/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2017-02-10T18:00:40.866Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>其实去年9月就借着腾讯云的活动弄到了 TrustAsia 的证书，试着弄了弄，发现网上教程大多是使用 keytool 自制的证书【你们可能用了假证书&lt;(￣ˇ￣)/】，举例子的格式都是 keystore ，当时看的我是一头雾水，然后。。。就拖了一学期直到放假回来才仔细琢磨弄好了，现在方法奉上！<br><a id="more"></a></p>
</blockquote>
<p>　</p>
<h3 id="1-HTTPS-介绍"><a href="#1-HTTPS-介绍" class="headerlink" title="1. HTTPS 介绍"></a>1. HTTPS 介绍</h3><p>　　原理大家自己都会查我就不的嘚吧嘚了，说下和 HTTP 的区别和为啥我们要尽量用 HTTPS 吧</p>
<p>　　我们把 HTTP 和 HTTPS 做一个比喻，网络就好像送快递， HTTP 就好比我们的包裹，如果运送的过程中有人图谋不轨，在你的包裹上做了手脚（也就是我们常说的 HTTP 劫持），你收到的时候就会被这些小动作影响，这时候轻则你会看到你访问的网页多了一些广告，这还能忍，重则盗取你的 cookie 中的数据做一些非法勾当，甚至直接向你的电脑植入木马，而 HTTPS 就好比卖家把包裹外面加了一个带密码锁的铁盒子，密码只有你和卖家知道，当你收到铁盒子的时候，输入密码把铁盒子去掉，就得到了完整无损的包裹，如果你收到的铁盒子上面有了破损，你就直接丢掉，让卖家重新快递，这样一来保证了我们的包裹也就是我们访问的页面是原始完整的</p>
<p>　</p>
<h3 id="2-证书文件的生成"><a href="#2-证书文件的生成" class="headerlink" title="2. 证书文件的生成"></a>2. 证书文件的生成</h3><p>　　我既然拿到了有机构认可的证书，就要用在网站上啊，但由于 Tomcat 使用的 Java 规范的证书文件是 keystore 或者 jks 格式，而 TrustAsia 给我的是 crt 和 key 文件，我们就要进行一下转换，我们需要使用 TrustAsia 提供的在线工具进项转换：</p>
<p>　　<a href="https://www.trustasia.com/tools-cert-converter" target="_blank" rel="external">证书格式转换</a></p>
<p>　　我们会看到如下页面：</p>
<p><img src="/img/2017-02-05/1.jpg" alt="alt img1"></p>
<p>　　我们只需要选择好证书文件（*.crt）和私钥文件（*.crt），PEM 私钥密码为空，然后填写你自己所用的密钥库密码并确认，点击生成就可以下载 jks 文件了，然后牢记你的密钥库密码，因为我们后面配置 Tomcat 的时候还会用到</p>
<p>　</p>
<h3 id="3-Tomcat-配置-HTTPS"><a href="#3-Tomcat-配置-HTTPS" class="headerlink" title="3. Tomcat 配置 HTTPS"></a>3. Tomcat 配置 HTTPS</h3><p>　　找到在 Tomcat 根目录，将jks文件放在 conf 文件夹下，然后编辑 <code>server.xml</code> ，找到如下段落，这段会被注释着，我们去掉注释符，我们暂定证书文件为 <code>123.jks</code> ，密钥库密码为 <code>123</code> ，注意修改端口为 <code>443</code> ，如果 <code>clientAuth</code> 为 <code>true</code> 表示Tomcat要求所有的SSL客户出示安全证书，对SSL客户进行身份验证，我们采用默认的 <code>false</code> ，其他设置采用默认，结果如下</p>
<pre><code>&lt;Connector port=&quot;443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;
    maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;
    keystoreFile=&quot;conf\123.jks&quot;
    keystorePass=&quot;123&quot;
    clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;
</code></pre><p>　　这样再次以 HTTPS 访问我们的网站就会看到结果了</p>
<p>　</p>
<h3 id="4-Tomcat-配置-HTTP-自动跳转-HTTPS"><a href="#4-Tomcat-配置-HTTP-自动跳转-HTTPS" class="headerlink" title="4. Tomcat 配置 HTTP 自动跳转 HTTPS"></a>4. Tomcat 配置 HTTP 自动跳转 HTTPS</h3><p>　　在完成上一步时，我们可以同时以 HTTP 和 HTTPS 的方式访问网站，但如果想全站使用 HTTPS ，以 HTTP 访问时自动跳转到 HTTPS 就要做如下设置</p>
<p>　　首先在根目录conf文件夹下编辑 <code>web.xml</code> ，在最后 <code>&lt;/welcome-file-list&gt;</code>后 <code>&lt;/web-app&gt;</code> 前加入这样一段代码</p>
<pre><code>&lt;web-resource-collection &gt;
    &lt;web-resource-name &gt;SSL&lt;/web-resource-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/web-resource-collection&gt;
&lt;user-data-constraint&gt;
    &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
&lt;/user-data-constraint&gt;
</code></pre><p>　　然后再编辑 <code>server.xml</code>，将 <code>redirectPort</code> 改为 <code>443</code> ，结果如下</p>
<pre><code>&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;
    connectionTimeout=&quot;20000&quot;
    redirectPort=&quot;443&quot; /&gt;
</code></pre><p>　　这样就修改完成了，但要注意，如果你的网站代码中使用了你本站的绝对 URL 地址，记得将他们 的 HTTP 全部改为 HTTPS</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实去年9月就借着腾讯云的活动弄到了 TrustAsia 的证书，试着弄了弄，发现网上教程大多是使用 keytool 自制的证书【你们可能用了假证书&amp;lt;(￣ˇ￣)/】，举例子的格式都是 keystore ，当时看的我是一头雾水，然后。。。就拖了一学期直到放假回来才仔细琢磨弄好了，现在方法奉上！&lt;br&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="Tomcat 8" scheme="http://yoursite.com/tags/Tomcat-8/"/>
    
      <category term="HTTPS" scheme="http://yoursite.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Markdown初学</title>
    <link href="http://yoursite.com/2016/12/09/2016-12-09-markdown/"/>
    <id>http://yoursite.com/2016/12/09/2016-12-09-markdown/</id>
    <published>2016-12-08T16:00:00.000Z</published>
    <updated>2017-02-09T18:25:44.167Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>自从用Hexo在Github建了这个Blog以来一直在闲置，一是前段时间确实忙，一是由于Hexo写文章要求用 MarkDown 语法，可是不会啊（摔），所以最近才有时间粗略的看了下，写这第一篇，介绍和练习一下Markdown语法<br><a id="more"></a></p>
</blockquote>
<p>　</p>
<h3 id="1-标题级别"><a href="#1-标题级别" class="headerlink" title="1. 标题级别"></a>1. 标题级别</h3><p>　　markdown支持简单的写出HTML中不同级别的标题，方法有2种，介绍比较方便的一种，往下看</p>
<h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><pre><code>写法：　##### 五级标题  
</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><pre><code>写法：　# 一级标题  
</code></pre><h2 id="我觉得二三四级"><a href="#我觉得二三四级" class="headerlink" title="我觉得二三四级"></a>我觉得二三四级</h2><h4 id="不用说"><a href="#不用说" class="headerlink" title="不用说"></a>不用说</h4><h3 id="你也该会了吧"><a href="#你也该会了吧" class="headerlink" title="你也该会了吧"></a>你也该会了吧</h3><p>　</p>
<h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h3><p>　　markdown支持引用格式，方法还是有2种，介绍比较方便的一种，支持引用中引用，往下看</p>
<blockquote>
<p>这是一个引用  </p>
<blockquote>
<p>这是一个引用的引用  </p>
<blockquote>
<p>这是一个引用的引用的引用</p>
<blockquote>
<p>你们嘴真碎．．．</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<pre><code>写法：　&gt;这是一个引用  
　　　　&gt;&gt;这是一个引用的引用  
　　　　&gt;&gt;&gt;这是一个引用的引用的引用
　　　　&gt;&gt;&gt;&gt;你们嘴真碎．．．`
</code></pre><p>　</p>
<h3 id="3-段落"><a href="#3-段落" class="headerlink" title="3. 段落"></a>3. 段落</h3><p>　　markdown是如何区分两个连续的句子是两行呢，两种形式，往下看  </p>
<p>段落一<br>段落二  </p>
<pre><code>写法：　段落一    ← 注意！这里打了2个空格
　　　　段落二
</code></pre><p>段落一</p>
<p>段落二</p>
<pre><code>写法：　段落一  ← 注意！这里打了1个回车
         ← 注意！这里打了1个回车
　　　　段落二
</code></pre><p>　</p>
<h3 id="4-缩进"><a href="#4-缩进" class="headerlink" title="4. 缩进"></a>4. 缩进</h3><blockquote>
<p>markdown是文档结构描述语言，不支持任何格式<br>　　　　　　　　　　　　　　　　　　　　——某知乎大神原话</p>
</blockquote>
<p>　　我们在Microsoft Office Word中可以在段落中定义首行缩进或者悬挂缩进，或者各个平台，IDE，编辑器等都适用直接敲两下跳格键<strong>[TAB]</strong>加入两个制表符，但markdown的设计目的是易读写，思想是样式和结构分离，所以缩进是应该交给CSS来完成的，但是呢，个别情况还是有这个需求的，以下是如何钻空子  </p>
<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>　　缩进2格</p>
<pre><code>写法：　　　缩进2格
        ↑ 注意！这里我打了2个全角空格，如果你问我什么是全角，自己查(￢_￢)
</code></pre><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>　　如果你记忆力好的话可以用HTML里的语法字符，三种，用多少自己写多少  </p>
<p>&nbsp;第一种<br>&ensp;第二种<br>&emsp;第三种  </p>
<pre><code>写法：　&amp;nbsp;第一种  
　　　　&amp;ensp;第二种  
　　　　&amp;emsp;第三种
</code></pre><p>　</p>
<h3 id="5-强调"><a href="#5-强调" class="headerlink" title="5. 强调"></a>5. 强调</h3><p>　　markdown支持粗体、斜体、粗斜体三种强调，写法是在两边加上用不同数量的*或_，用哪个自己挑，往下看  </p>
<p><em>斜体</em><br><strong>粗体</strong><br><strong><em>粗斜体</em></strong></p>
<p>（这个显示效果是因为我自己设置的CSS导致的，用默认CSS是没有问题的）  </p>
<pre><code>写法：　*斜体*  
　　　　**粗体**  
　　　　***粗斜体***
</code></pre><p>　</p>
<h3 id="6-列表"><a href="#6-列表" class="headerlink" title="6. 列表"></a>6. 列表</h3><p>　　markdown支持书写无序列表和有序列表两种，可以混用，但是会不会乱自己尝试  </p>
<h5 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h5><p>　　使用 * 、+ 、- 三种标记，可以但不建议混用，标记和列表项目之间必须至少有一个空格，可以有子项，方法是前面加制表符，往下看  </p>
<ul>
<li>第一项<ul>
<li>第一项的子项<ul>
<li>第一项的子项的子项<ul>
<li>你们嘴是真的碎．．．</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>第二项</li>
</ul>
<ul>
<li><p>第三项</p>
<pre><code>写法：　* 第一项  
　　　　    * 第一项的子项
　　　　        * 第一项的子项的子项
　　　　            * 你们嘴是真的碎．．．
　　　　　↑ 注意！这里每次都是多加一个制表符
　　　　+ 第二项  
　　　　- 第三项  
</code></pre></li>
</ul>
<h5 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h5><p>　　使用一个数字接一个英文句点作为标记，注意数字和句点间不能有空格，句点和项目内容之间必须至少有一个空格，往下看</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li><p>第三项</p>
<pre><code>写法：　1. 第一项  
　　　　2. 第二项  
　　　　3. 第三项
</code></pre></li>
</ol>
<p>　　你也可能会发现，这数字根本不按顺序写也没关系啊，为什么别问我，问markdown的开发者，问完了记得告诉我  </p>
<h5 id="3-混用"><a href="#3-混用" class="headerlink" title="3. 混用"></a>3. 混用</h5><p>　　举个例子，有别的想法需求自己琢磨，往下看</p>
<ol>
<li>Markdown</li>
<li>的<ul>
<li>列表<ul>
<li>混</li>
</ul>
</li>
</ul>
</li>
<li>用  </li>
</ol>
<pre><code>写法：　100. Markdown
　　　　200. 的
　　　　    * 列表
　　　　        * 混
　　　　300. 用
</code></pre><p>　</p>
<h3 id="7-链接"><a href="#7-链接" class="headerlink" title="7. 链接"></a>7. 链接</h3><p>　　Markdown支持插入链接，两种写法，普通链接和参考链接，往下看  </p>
<h5 id="1-普通链接"><a href="#1-普通链接" class="headerlink" title="1. 普通链接"></a>1. 普通链接</h5><p>　　分两部分，第一部分中括号里链接名称，第二部分小括号里链接地址，可以加一个空格后面加入title名称，用双引号包裹，注意不区分大小写，如果你使用自己的主机，支持相对路径</p>
<p><a href="../../../../" title="Icex">My blog homepage</a>  </p>
<pre><code>写法：　[My blog homepage](../../../../ &quot;Icex&quot;)  
</code></pre><h5 id="2-参考链接"><a href="#2-参考链接" class="headerlink" title="2. 参考链接"></a>2. 参考链接</h5><p>　　分两段，每段两部分，第一段第一部分中括号里参考名称，第二部分中括号里参考标签，这个标签自己随便写，第二段第一部分中括号里参考标签，这个标签必须和第一部分的一样才能匹配，注意，第二部分是冒号加链接地址，同样可以添加title名称，支持相对路径</p>
<p><a href="http://blog.hanting1226.com.cn/" title="参考链接" target="_blank" rel="external">参考链接</a>  </p>
<pre><code>写法：　[参考链接][label]  
　　　　[LABEL]:http://blog.hanting1226.com.cn/ &quot;参考链接&quot;  
</code></pre><p>　</p>
<h3 id="8-图片"><a href="#8-图片" class="headerlink" title="8. 图片"></a>8. 图片</h3><p>　　Markdown支持插入图片，两种写法，同样是普通式和参考式，我就不详细介绍了。图片和链接很相似，区别是前面多了个叹号，图片名称需要加alt空格后再写。但注意，到目前为止， Markdown 还没有办法指定图片的宽高，如果需要的话，还是回去写HTML的img标签，举个例子，往下看</p>
<p><img src="/img/2016-12-09/example.gif" alt="alt example"></p>
<pre><code>写法：　![alt example](/img/2016-12-09/example.gif)
</code></pre><p>　</p>
<h3 id="9-代码"><a href="#9-代码" class="headerlink" title="9. 代码"></a>9. 代码</h3><p>　　Markdown支持插入代码格式，两种写法，一种是把代码用反引号 ` 括起来，一种是前面加两个制表符，效果不同，往下看</p>
<pre><code>Code
</code></pre><p><code>Code</code></p>
<pre><code>写法：　        Code
　　　　　　↑ 注意！这里写了两个制表符
　　　　`Code`
</code></pre><p>　</p>
<h3 id="10-水平分割线"><a href="#10-水平分割线" class="headerlink" title="10. 水平分割线"></a>10. 水平分割线</h3><p>　　Markdown支持水平分割线，用连续三个的*或者-、_表示，往下看</p>
<hr>
<hr>
<hr>
<pre><code>写法：　***
　　　　---
　　　　___
</code></pre><p>　</p>
<h3 id="11-特殊符号"><a href="#11-特殊符号" class="headerlink" title="11. 特殊符号"></a>11. 特殊符号</h3><p>　　Markdown 转换为HTML时一些特殊符号会有影响，所以使用这些符号时需在前面加反斜杠\，支持的符号往下看</p>
<pre><code>#　       井字号
*　        星号
+　       加号
-　        减号
\     反斜线  
`     反引号  
_     下划线
{}    花括号
[]    方括号
()    括弧
.     英文句点
!     惊叹号
</code></pre><p>　</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　Markdown经过我几个小时的使用发现的确方便很多，但同时还有一些未完善的部分（如文中没有讲解的写法繁杂的表格），且多个在线或跨平台Markdown编辑器都各有优势与劣势，但这都不能掩盖Markdown的锋芒，目前来讲，Markdown作为一种书写语言，完全可以胜任日常需求，若经过继续维护与发展，完全可以深入一些专业领域，以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自从用Hexo在Github建了这个Blog以来一直在闲置，一是前段时间确实忙，一是由于Hexo写文章要求用 MarkDown 语法，可是不会啊（摔），所以最近才有时间粗略的看了下，写这第一篇，介绍和练习一下Markdown语法&lt;br&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
